{"version":3,"sources":["App.js","crowDistance.js","index.js"],"names":["randomLines","parkData","map","park","key","nextPark","length","Polyline","properties","PARK_ID","positions","geometry","coordinates","onmouseover","x","alert","NAME","coordinates1","coordinates2","unit","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","toFixed","crowDistance","ReactDOM","render","React","useState","activePark","setActivePark","Map","center","zoom","TileLayer","url","attribution","Marker","position","onClick","Popup","onClose","target","rel","href","WEBSITE","document","getElementById"],"mappings":"mVAMA,IAAMA,EAAc,WAClB,OAAOC,IAAkBC,KAAI,SAACC,EAAMC,GAClC,IAAMC,EAAYD,EAAM,EAAIH,IAAkBK,OAAUL,IAAkBG,EAAM,GAAKH,IAAkB,GACvG,OAAO,kBAACM,EAAA,EAAD,CACLH,IAAKD,EAAKK,WAAWC,QACrBC,UAAW,CAGTP,EAAKQ,SAASC,YACdP,EAASM,SAASC,aAEpBC,YAAa,SAACC,GACZC,MAAM,oBAAD,OAAqBZ,EAAKK,WAAWQ,KAArC,gBAAiDX,EAASG,WAAWQ,KAArE,uBClBN,SAAsBC,EAAcC,EAAcC,GAAO,IAAD,cACxCF,EADwC,GACtDG,EADsD,KAChDC,EADgD,mBAExCH,EAFwC,GAEtDI,EAFsD,KAEhDC,EAFgD,KAG9D,GAAKH,GAAQE,GAAUD,GAAQE,EAC9B,OAAO,EAGP,IAAIC,EAAUC,KAAKC,GAAKN,EAAK,IACzBO,EAAUF,KAAKC,GAAKJ,EAAK,IACzBM,EAAQP,EAAKE,EACbM,EAAWJ,KAAKC,GAAKE,EAAM,IAC3BE,EAAOL,KAAKM,IAAIP,GAAWC,KAAKM,IAAIJ,GAAWF,KAAKO,IAAIR,GAAWC,KAAKO,IAAIL,GAAWF,KAAKO,IAAIH,GASpG,OARIC,EAAO,IACVA,EAAO,GAIRA,EAAc,IADdA,EAAc,KADdA,EAAOL,KAAKQ,KAAKH,IACCL,KAAKC,IACJ,OACT,KAANP,IAAaW,GAAc,UACrB,KAANX,IAAaW,GAAc,OACxBA,EAAKI,QAAQ,GDF4EC,CAAahC,EAAKQ,SAASC,YAAaP,EAASM,SAASC,YAAa,KAA5J,gBEbbwB,IAASC,OAAO,mBFmBD,WAAgB,IAAD,EACQC,IAAMC,SAAS,MADvB,mBACrBC,EADqB,KACTC,EADS,KAE5B,OACE,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,WAAY,kBAAmBC,KAAM,GACjD,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAGb9C,IAAkBC,KAAI,SAAAC,GAAI,OACzB,kBAAC6C,EAAA,EAAD,CACE5C,IAAKD,EAAKK,WAAWC,QACrBwC,SAAU,CACR9C,EAAKQ,SAASC,YAAY,GAC1BT,EAAKQ,SAASC,YAAY,IAE5BsC,QAAS,WACPT,EAActC,SAKnBH,IAEAwC,GACC,kBAACW,EAAA,EAAD,CACEF,SAAU,CACRT,EAAW7B,SAASC,YAAY,GAChC4B,EAAW7B,SAASC,YAAY,IAElCwC,QAAS,WACPX,EAAc,QAGhB,6BACE,4BAAKD,EAAWhC,WAAWQ,MAC3B,uBAAGqC,OAAO,SAASC,IAAI,sBAAsBC,KAAMf,EAAWhC,WAAWgD,SAAzE,gBEvDI,MAASC,SAASC,eAAe,U","file":"static/js/main.bf6f35fd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, Polyline } from \"react-leaflet\";\nimport * as parkData from \"./data/bikeparks.json\";\nimport \"./App.css\";\nimport {crowDistance} from './crowDistance'\n\nconst randomLines = () => {\n  return parkData.features.map((park, key) => {\n    const nextPark = (key + 1 < parkData.features.length) ? parkData.features[key + 1] : parkData.features[0]\n    return <Polyline\n      key={park.properties.PARK_ID}\n      positions={[\n        // [47.49984519210629, 10.365775754123737],\n        // [47.49984519210629, 9.365775754123737]\n        park.geometry.coordinates,\n        nextPark.geometry.coordinates\n      ]}\n      onmouseover={(x) => {\n        alert(`Distanz zwischen ${park.properties.NAME} und ${nextPark.properties.NAME} beträgt ${crowDistance(park.geometry.coordinates, nextPark.geometry.coordinates, \"K\")} km.`)\n      }}\n    />\n  })\n}\n\nexport default function App() {\n  const [activePark, setActivePark] = React.useState(null);\n  return (\n    <Map center={[48.9657065, 10.9764000000002]} zoom={7}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n\n      {parkData.features.map(park => (\n        <Marker\n          key={park.properties.PARK_ID}\n          position={[\n            park.geometry.coordinates[0],\n            park.geometry.coordinates[1]\n          ]}\n          onClick={() => {\n            setActivePark(park);\n          }}\n        />\n      ))}\n\n      {randomLines()}\n\n      {activePark && (\n        <Popup\n          position={[\n            activePark.geometry.coordinates[0],\n            activePark.geometry.coordinates[1]\n          ]}\n          onClose={() => {\n            setActivePark(null);\n          }}\n        >\n          <div>\n            <h2>{activePark.properties.NAME}</h2>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={activePark.properties.WEBSITE}>Website</a>  \n          </div>\n        </Popup>\n      )}\n    </Map>\n  );\n}\n","export function crowDistance(coordinates1, coordinates2, unit) {\n    let [lat1, lon1] = coordinates1\n    let [lat2, lon2] = coordinates2\n\tif ((lat1 == lat2) && (lon1 == lon2)) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tvar radlat1 = Math.PI * lat1/180;\n\t\tvar radlat2 = Math.PI * lat2/180;\n\t\tvar theta = lon1-lon2;\n\t\tvar radtheta = Math.PI * theta/180;\n\t\tvar dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\t\tif (dist > 1) {\n\t\t\tdist = 1;\n\t\t}\n\t\tdist = Math.acos(dist);\n\t\tdist = dist * 180/Math.PI;\n\t\tdist = dist * 60 * 1.1515;\n\t\tif (unit==\"K\") { dist = dist * 1.609344 }\n\t\tif (unit==\"N\") { dist = dist * 0.8684 }\n\t\treturn dist.toFixed(2);\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}